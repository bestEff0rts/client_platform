#checklist.py 
| ‚Ññ  | –ö–æ–º–ø–æ–Ω–µ–Ω—Ç                            | –§–∞–π–ª / –ú–æ–¥—É–ª—å                     | –°—Ç–∞—Ç—É—Å / –¶–µ–ª—å                            |
| -- | ------------------------------------ | --------------------------------- | ---------------------------------------- |
| _1  | **ML pipeline (X)**                  | `ml_pipeline.py`                  | `Pipeline` –∏–∑ `transformers` –±–µ–∑ –º–æ–¥–µ–ª–∏  |- DONE
| _2  | **Model factory**                    | `models_factory.py`               | –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π (RF, XGB, MLP...)          |- DONE 
| _3  | **Preprocessing transformers**       | `transformers.py`                 | `FeatureEng`, `Stationarity`, `Scaler`   |- DONE
| _4  | **Stationarity logic + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ** | `StationarityTransformer`         | –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞: orig / fracdiff / diff    |–±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è DONE
| _5  | **Save/load pipeline+model**         | `joblib` + `models/`              | –í—Å—ë —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ `.pkl`                 |–±–µ–∑ —Å–æ—Ö—Ä pipe DONE
; 0 –ø—Ä–æ–≥–Ω–∞—Ç—å predict() –∏ metrics
+ raw data myparser.py - start = end= limit= 
**************************************************
–ü–†–û–ì–û–ù RandomizedSarchCV for estimating tuning parameters- —Ç–∞–∫ –Ω—É ALMOST DONE
@afmllabelling.py Tripple Barrier Method and Fixed Horizon Method- def for import 

| _6  | **Backtest**                         | `backtest.py`+ @–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –≤ server| –ü–æ–¥–≥—Ä—É–∑–∫–∞ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö + –º–µ—Ç—Ä–∏–∫–∏     | >>>>>>_________ 1
| _7  | **–ú–µ—Ç—Ä–∏–∫–∏ ML + —Ñ–∏–Ω.**                | `metrics.py`                      | MSE, R2 + Sharpe, Sortino, MaxDrawdown   |
| _8  | **Bars / Sampling logic**            | `sampling.py`                     | Dollar, Tick, Imbalance (AFML logic)     |
| _9  | **FastAPI endpoints**                | `server.py`                       | `parse/`, `predict/`, `backtest/`, ...   |+- predict; metrics
| _10 | **Retraining**                       | retrain.py` +@ server             | –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≥–æ–Ω–∫–∞ –ø–æ –Ω–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º       |>>>>>>____ 2 
| _11 | **Model metadata storage**           | `models.db`, `ModelMeta`          | SQLite, `upload`, `info`, `list`         |+-
| _12 | **Unit tests**                       | `tests/test_functions.py`         | –î–ª—è –≤—Å–µ—Ö `custom` —Ñ—É–Ω–∫—Ü–∏–π (`pytest`)     |>>>>>__3
| _13 | **Functional tests**                 | `tests/test_pipeline.py`          | –î–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞: `fit_transform`, `.score` |>>>
| _14 | **Swagger UI auto-docs**             | `FastAPI` built-in                | –£–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫—Ä–∏–Ω —É —Ç–µ–±—è –µ—Å—Ç—å          | DONE
| _15 | **Web3/on-chain stub (–±—É–¥–µ—Ç)**       | `web3.py`, `contract.py`          | –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–æ–∫–µ–Ω–∞–º / –≥–æ–ª–æ—Å–∞           |
| _16 | **UI/React stub (–±—É–¥–µ—Ç)**            | `React.js`                        | –î–∞—à–±–æ—Ä–¥ / —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞                    |
| _17 | **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**         | `architecture.md`                 | (–±—É–¥–µ—Ç) ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ + —Å—Ö–µ–º–∞   |-–ü–†–û–°–¢–û –°–û–ë–†–ê–¢–¨
| _18 | *save to fastapi swagger ui SQLAlchemy –∏ FastAPI ORM* –î–û–†–ê–ë–û–¢–ê–¢–¨ –∫–æ–Ω–µ—Ü ml_pipeline.py - model_name= ; record = ;
—ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫–∞ –º–æ–∂–Ω–æ –∏ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ http://127.0.0.1:8000/docs#/ 
| _19!!! *–∏–Ω–ø—É—Ç RESHAPE –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π* —Å–µ–π—á–∞—Å x_train x_test —ç—Ç–æ time series pandas dataframe
|_20!!| *api /model id info- Response body —á—Ç–æ–±—ã get_params –≤—ã–¥–∞–≤–∞–ª –∫–∞–∫ —É 1 –∏ 2- –ö–ê–ö –ò–• –°–û–•–† —Ç–∞–∫ –Ω–∞–¥–æ –∏ –æ—Å—Ç





***notes for README.MD and ARCHITECTURE.MD
–ü–æ—á–µ–º—É —Ä–∞—Å—á–µ—Ç target (–Ω–∞–ø—Ä–∏–º–µ—Ä, log_returns) –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω–µ Pipeline?
üí° –ö–ª—é—á–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ ‚Äî data leakage.
Pipeline –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ X, target ‚Äî —ç—Ç–æ y.
–ï—Å–ª–∏ —Ç—ã –≤ Pipeline –¥–æ–±–∞–≤–∏—à—å —à–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ y = f(X) (–Ω–∞–ø—Ä–∏–º–µ—Ä, log_returns = log(close/close.shift(1))), —Ç—ã –Ω–∞—Ä—É—à–∞–µ—à—å –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è train/test:
‚û°Ô∏è –Ω–∞ —ç—Ç–∞–ø–µ .fit() –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±—É–¥—É—â–µ–≥–æ, —Ç.–∫. .shift() –∏–ª–∏ .diff() –≤–æ–≤–ª–µ–∫–∞—é—Ç –¥–∞–Ω–Ω—ã–µ —Å t+1, t-1


@model.factory.py
Elastic Net
–î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: 0 < Œ± < 1. 
aicorespot.io
Œ± = 0 ‚Äî –≤–µ—Å—å –≤–µ—Å ‚Äî —à—Ç—Ä–∞—Ñ L2.
Œ± = 1 ‚Äî –≤–µ—Å—å –≤–µ—Å ‚Äî —à—Ç—Ä–∞—Ñ L1.
0 < Œ± < 1 ‚Äî —à—Ç—Ä–∞—Ñ ‚Äî –∫–æ–º–±–∏–Ω–∞—Ü–∏—è L1 –∏ L2


–∫ 20
Download
{
  "model_id": 2,
  "name": "lob_test_model.pkl",
  "path": "models/lob_test_model.pkl",
  "params": {
    "bootstrap": false,
    "contamination": "auto",
    "max_features": 1,
    "max_samples": "auto",
    "n_estimators": 300,
    "n_jobs": null,
    "random_state": 69,
    "verbose": 0,
    "warm_start": false
  }
}

–õ–û–ì–ò–ö–ê –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å PREDICT DICRETE OUTCOME(=CLASSIFIACTION)
raw_data 
  ‚Üí feature_engineering (pipeline) 
  ‚Üí label_generation  ‚Üê (target variable: y_class)
  ‚Üí train_test_split
  ‚Üí model.fit(X, y_class)
  ‚Üí predict ‚Üí backtest (–Ω–∞ –ø—Ä–∞–≤–∏–ª–∞—Ö)
Best practices:
–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
y = labeling_function(df) ‚Üí train_test_split(X, y)
–ü–æ—Ç–æ–º—É —á—Ç–æ y –∑–∞–≤–∏—Å–∏—Ç –∏ –æ—Ç –±—É–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, future return > threshold), –∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∞—Å—Ç—å—é X.

FASTAPI
–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è POST /model/predict
FastAPI –æ–∂–∏–¥–∞–µ—Ç –Ω–∞ —ç—Ç–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ JSON —Å –∫–ª—é—á–æ–º "data", –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –¥–≤—É–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (List[List[float]]), –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–∫–∞–∫ X_test).
{
  "data": [
    [0.1, -0.5, 0.3, 1.2, -1.0, 0.04, ...],  // sample 1
    [0.2, -0.3, 0.4, 1.0, -0.8, 0.03, ...]   // sample 2
  ]
}
–ì–¥–µ –≤–∑—è—Ç—å —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ?
–ü–æ—Å–ª–µ –ø—Ä–æ–≥–æ–Ω–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ç–≤–æ–π pipeline_x (–Ω–∞–ø—Ä–∏–º–µ—Ä, x_transformed_df.iloc[-5:])

–ü—Ä–æ—Å—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—à—å –∫ .tolist():
last_samples = x_transformed_df.iloc[-5:].values.tolist()

@backtesting.py –õ–û–ì–ò–ö–ê- y = labeling_function(df) ‚Üí train_test_split(X, y)
| ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç      | Trading —Å—Ç—Ä–∞—Ç–µ–≥–∏—è                       |
| ----------------- | --------------------------------------- |
| `X` (features)    | –ü—Ä–∏–∑–Ω–∞–∫–∏: —Ü–µ–Ω–∞, RSI, SMA –∏ –¥—Ä.          |
| `y` (target)      | –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏–ª–∏ —Å–∏–≥–Ω–∞–ª (buy/sell)        |
| `model.predict()` | –°–∏–≥–Ω–∞–ª –æ—Ç –º–æ–¥–µ–ª–∏ (`≈∑`)                  |
| `thresholding`    | –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ `≈∑` –≤ —Å–∏–≥–Ω–∞–ª (`+1`, `0`)    |
| `backtest`        | –ü—Ä–æ–≥–æ–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º |
| `metrics`         | Sharpe, max drawdown, CAGR, etc.        |

–ü–æ—Ç–æ–º—É —á—Ç–æ y –∑–∞–≤–∏—Å–∏—Ç –∏ –æ—Ç –±—É–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, future return > threshold), –∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∞—Å—Ç—å—é X
–∫–∞–∫–æ–π —Ç–∞—Ä–≥–µ—Ç –Ω—É–∂–µ–Ω??
| –ù–∞–∑–≤–∞–Ω–∏–µ                | –¶–µ–ª—å                           | –ü—Ä–∏–º–µ—Ä              | Task           |
| ----------------------- | ------------------------------ | ------------------- | -------------- |
| `next_return`           | –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ t+1              | `log(C[t+1]/C[t])`  | Regression     |
| `return_3d`             | –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 3 –¥–Ω—è            | `log(C[t+3]/C[t])`  | Regression     |
| `binary_label`          | –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è "up/down"        | `1 if r > 0 else 0` | Classification |
| `triple_barrier_label`  | ML Labeling –ø–æ AFML            | tp/sl/horizon       | Classification |
| `moving_average_signal` | –ö—Ä–æ—Å—Å –º—É–≤–∏–Ω–≥–æ–≤ (–∫–∞–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è) | `if SMA5 > SMA20`   | Signal         |
4. Feature engineering: –¥–ª—è backtest –∏ –º–æ–¥–µ–ª–∏
–ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:
data['ret_1d'] = np.log(data['Close'] / data['Close'].shift(1))
data['ret_5d'] = np.log(data['Close'] / data['Close'].shift(5))
data['volatility'] = data['ret_1d'].rolling(10).std()
data['sma_10'] = data['Close'].rolling(10).mean()
data['sma_50'] = data['Close'].rolling(50).mean()
data['volume_z'] = (data['Volume'] - data['Volume'].rolling(20).mean()) / data['Volume'].rolling(20).std()

–ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –±—É–¥—É—â–µ–µ (—Ç–æ–ª—å–∫–æ .shift(1) –∏–ª–∏ .rolling(...))
—Ç–∞—Ä–≥–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

Backtest ‚Äî —ç—Ç–æ –ø—Ä–æ–≥–æ–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ü–µ–ª—å—é –æ—Ü–µ–Ω–∫–∏ –µ—ë —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ —Ä–∏—Å–∫–∞. –°—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Äî —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ:

"–ï—Å–ª–∏ model.predict(X_t) > threshold, —Ç–æ buy, –∏–Ω–∞—á–µ hold / sell."
| –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ   | –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–µ–π—Å—Ç–≤–∏—è | –ê–ª–≥–æ—Ä–∏—Ç–º      |
| -------------- | ------------------ | ------------- |
| `≈∑_t > 0`      | –ü–æ–∫—É–ø–∫–∞            | long-only     |
| `≈∑_t > Œ±`      | –ü–æ–∫—É–ø–∫–∞, –∏–Ω–∞—á–µ –Ω–µ—Ç | thresholding  |
| `≈∑_class == 1` | –ö—É–ø–∏—Ç—å, –∏–Ω–∞—á–µ –Ω–µ—Ç  | –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è |
| `≈∑_class == 2` | Short              | multi-class   |

@cv
| –ü–∞—Ä–∞–º–µ—Ç—Ä                 | `GridSearchCV`                         | `RandomizedSearchCV`                              |
| ------------------------ | -------------------------------------- | ------------------------------------------------- |
| –ê–ª–≥–æ—Ä–∏—Ç–º                 | **–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä** –≤—Å–µ—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π      | **–°—ç–º–ø–ª–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ** –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π |
| –ë—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤–∏–µ           | –ú–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏         | –ë—ã—Å—Ç—Ä–µ–µ, –ª–∏–Ω–µ–π–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è                   |
| –†–∏—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è        | –ù–∏–∂–µ (–Ω–æ –¥–æ—Ä–æ–∂–µ)                       | –ï—Å—Ç—å —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±—Ä–æ—Å                       |
| –ù—É–∂–Ω–æ –ª–∏ `random_state`? | ‚ùå –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏                    | ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –¥–ª—è **–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏**        |
| –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å             | –ö–æ–≥–¥–∞ —Å–µ—Ç–∫–∞ –º–∞–ª–µ–Ω—å–∫–∞—è –∏ –≤–∞–∂–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å | –ö–æ–≥–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–Ω–æ–≥–æ –∏ –≤–∞–∂–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å           |


scoring= ‚Äî –∫–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∏ –æ—Ç —á–µ–≥–æ –∑–∞–≤–∏—Å—è—Ç
üîπ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥–µ–ª–µ–π:
–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Äî accuracy, f1, precision, recall, roc_auc, log_loss, ‚Ä¶

–†–µ–≥—Ä–µ—Å—Å–∏—è ‚Äî r2, neg_mean_squared_error, neg_mean_absolute_error, explained_variance, ‚Ä¶
| –ú–æ–¥–µ–ª—å                   | –ó–∞–¥–∞—á–∞        | scoring                                 | –ü–æ–¥—Ö–æ–¥–∏—Ç? |
| ------------------------ | ------------- | --------------------------------------- | --------- |
| `RandomForestClassifier` | –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è | `'accuracy'`, `'f1_macro'`, `'roc_auc'` | ‚úÖ         |
| `XGBClassifier`          | –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è | `'f1_macro'`, `'log_loss'`, `'roc_auc'` | ‚úÖ         |
| `LogisticRegression`     | –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è | `'f1'`, `'precision'`, `'recall'`       | ‚úÖ         |
| `RandomForestRegressor`  | —Ä–µ–≥—Ä–µ—Å—Å–∏—è     | `'r2'`, `'neg_mean_squared_error'`      | ‚úÖ         |
| `Lasso`, `Ridge`, `PLS`  | —Ä–µ–≥—Ä–µ—Å—Å–∏—è     | `'neg_mean_absolute_error'`, `'r2'`     | ‚úÖ         |

–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫:
https://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter
üî∏ GridSearchCV —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è scoring, –∏–Ω–∞—á–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:

–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: accuracy,

—Ä–µ–≥—Ä–µ—Å—Å–∏—è: r2.

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
https://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter

| –¢–∏–ø –∑–∞–¥–∞—á–∏        | –ó–Ω–∞—á–µ–Ω–∏—è `scoring`                                  | –ü—Ä–∏–º–µ–Ω–∏–º–æ –∫ –º–æ–¥–µ–ª—è–º                               |
| ----------------- | --------------------------------------------------- | ------------------------------------------------- |
| **–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è** | `"accuracy"`                                        | –≤—Å–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (`RF`, `XGB`, `SVM`, `LogReg`) |
|                   | `"precision"`, `"recall"`, `"f1"`, `"roc_auc"`      | ‚Äî                                                 |
|                   | `"f1_macro"` (–≤–∑–≤–µ—à–∏–≤–∞–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º)                | ‚Äî                                                 |
|                   | `"balanced_accuracy"`                               | –¥–ª—è –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤                    |
| **–†–µ–≥—Ä–µ—Å—Å–∏—è**     | `"r2"`, `"neg_mean_squared_error"`                  | `Ridge`, `Lasso`, `SVR`, `PLSRegression`          |
|                   | `"neg_mean_absolute_error"`, `"explained_variance"` | ‚Äî                                                 |

@CV 
–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: UserWarning: The total space of parameters 12 is smaller than n_iter=20
üìå –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:
–¢—ã –ø–µ—Ä–µ–¥–∞—ë—à—å –≤ RandomizedSearchCV:

n_iter=20 ‚Üí –ø—Ä–æ—Å–∏—à—å —Å–ª—É—á–∞–π–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å 20 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

–Ω–æ param_distributions —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ–≥–æ 12 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π

üìê –ü–æ–¥—Å—á—ë—Ç:
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
C:         [0.1, 1, 10]              ‚Üí 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞  
kernel:    ['linear', 'rbf']         ‚Üí 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞  
gamma:     ['scale', 'auto']         ‚Üí 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞  
‚Üí 3 √ó 2 √ó 2 = 12 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π

@UNIT_TESTS/.
–î–õ–Ø –ü–†–û–î–ê–ö–®–ù
–Æ–ù–ò–¢-–¢–ï–°–¢–´: –ª–æ–≥–∏–∫–∞ –∏ –ø—Ä–∏–º–µ—Ä
–ó–∞—á–µ–º –Ω—É–∂–Ω—ã:
–û–±–µ—Å–ø–µ—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–ô –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å

–£–ø—Ä–æ—Å—Ç–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É –≤ –±—É–¥—É—â–µ–º
| –§—É–Ω–∫—Ü–∏—è                        | –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å                                                    |
| ------------------------------ | ---------------------------------------------------------------- |
| `build_model`                  | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω—É–∂–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø–æ –∏–º–µ–Ω–∏                        |
| `build_preprocessing_pipeline` | pipeline –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, `.fit_transform()` —Ä–∞–±–æ—Ç–∞–µ—Ç                  |
| `train_model_with_cv()`        | –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å, –º–µ—Ç—Ä–∏–∫–∏ –≤ dict |
| `fetch_binance_ohlcv()`        | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame –Ω—É–∂–Ω–æ–π —Ñ–æ—Ä–º—ã                                |
| `UniStationarityTransformer`   | –ü—Ä–æ–≤–µ—Ä–∫–∞ `fit()` –∏ `transform()` –¥–∞—é—Ç –º–∞—Ç—Ä–∏—Ü—É –Ω—É–∂–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ |

@afml_labelling.py
3ple barrier labellimg - SL TP TO- stop loss; take profit; time out 
—Å–æ–±—Ä–∞—Ç—å –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É Triple Barrier Labeling:

get_daily_vol() ‚Üí –æ—Ü–µ–Ω–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏

add_vertical_barrier() ‚Üí —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã —É–¥–µ—Ä–∂–∞–Ω–∏—è

get_events() ‚Üí —Å—Ç—Ä–æ–∏–º —Å–æ–±—ã—Ç–∏—è —Å pt/sl/t1

apply_pt_sl_on_t1() ‚Üí –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–æ–ø—ã

get_bins() ‚Üí —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –º–µ—Ç–∫–∞ (–ª–µ–π–±–ª: +1 / -1 / 0)


| –®–∞–≥ | –õ–æ–≥–∏–∫–∞                                                            |
| --- | ----------------------------------------------------------------- |
| 1   | –í—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π (`molecule`)                      |
| 2   | –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å PT –∏ SL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç `trgt`                 |
| 3   | –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ: —Å—Ç—Ä–æ–∏—Ç—Å—è –ø—É—Ç—å —Ü–µ–Ω—ã `close[loc:t1]`        |
| 4   | –í—ã—á–∏—Å–ª—è—é—Ç—Å—è –∫—É–º. –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º (—á–µ—Ä–µ–∑ `side`)         |
| 5   | –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π PT/SL                                 |
| 6   | –í–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –¥–∞—Ç—ã, –∫–æ–≥–¥–∞ —Å—Ä–∞–±–æ—Ç–∞–ª PT –∏–ª–∏ SL (–∏–ª–∏ `NaT`, –µ—Å–ª–∏ –Ω–µ—Ç) |

get_events()
–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç events?
–§—Ä–µ–π–º events ‚Äî —ç—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π. –ü–æ—Å–ª–µ get_events() –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:

index (datetime)	t1 (datetime)	trgt (float)
2020-01-01	2020-01-05	0.015
2020-01-07	2020-01-10	0.012

index ‚Äî –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª—Å—è —Å–∏–≥–Ω–∞–ª).

t1 ‚Äî –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (—Ä–∞–Ω—å—à–µ –∏–∑ PT/SL –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –±–∞—Ä—å–µ—Ä–∞).

trgt ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–∏ (volatility-adjusted target return).

–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª–∞—Å—Å print(type(data))        # <class 'list'>
print(type(data[0]))     # <class 'dict'>

@MOEX
 —ç—Ç–æ –¥–ª—è def fetch_moex_ohlcv 
import asyncio
import platform
import sys

if sys.platform.startswith("win") and sys.version_info >= (3, 8):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
#or this for jupyter r-reticulate
import nest_asyncio
nest_asyncio.apply()
data = await fetch_moex_ohlcv("SBER")

#RAW DATA_public api endpoint_myparser.py MOEX
from myparser import fetch_binance_ohlcv, fetch_moex_ohlcv
data = asyncio.run(fetch_moex_ohlcv("SBER")) 
len(data)
data
#–≤ PANDAS DATAFRAME+ –†–ê–°–ß–ï–¢ TARGETimport pandas as pd
df = pd.DataFrame(data)
df['begin'] = pd.to_datetime(df['begin'])  # convert to datetime
df.set_index('begin', inplace=True)
print(df.head())
print(df.describe())

—ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ò–ú–ü–û–†–¢–û–í –ö–ê–°–¢–û–ú–ù–´–• - –ø—Ä–æ—Å—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å)))
import afml_labels
print(dir(afml_labels))

@3ple barrier labelling
| –§—É–Ω–∫—Ü–∏—è                | –í—Ö–æ–¥—ã                              | –í—ã—Ö–æ–¥—ã              |
| ---------------------- | ---------------------------------- | ------------------- |
| `get_daily_vol`        | close                              | daily\_vol (Series) |
| `add_vertical_barrier` | t\_events, close, num\_days        | t1 (Series)         |
| `get_events`           | close, t\_events, pt\_sl, trgt, t1 | events (DataFrame)  |
| `apply_pt_sl_on_t1`    | close, events, pt\_sl, molecule    | df0 (pt/sl: Series) |
| `get_bins`             | events, close                      | labels (ret, bin)   |

